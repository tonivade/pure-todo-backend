plugins {
  id 'java-library'
  id 'application'
  alias(libs.plugins.download)
  alias(libs.plugins.graalvmNativeImage)
  alias(libs.plugins.versions)
}

base {
  archivesName = 'todo-backend'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://oss.sonatype.org/content/repositories/snapshots'
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

test {
  useJUnitPlatform()
}

javadoc.options {
  addStringOption('-release', '21')
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

compileTestJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

dependencies {
  annotationProcessor libs.purejson
  implementation libs.purefunMonad
  implementation libs.purefunEffect
  implementation libs.purefunTransformer
  runtimeOnly libs.purefunInstances
  implementation libs.zeromockServer
  implementation libs.puredbc
  implementation libs.purecfg
  implementation libs.purejson
  implementation libs.hikaricp
  runtimeOnly libs.h2
  runtimeOnly libs.logbackClassic

  testImplementation libs.zeromockJunit5
  testImplementation libs.zeromockClient
  testImplementation libs.purecheck
  testImplementation libs.junitJupiterEngine
  testRuntimeOnly libs.junitPlatformRunner
  testImplementation libs.mockitoCore
  testImplementation libs.mockitoJunitJupiter
  testImplementation libs.assertjCore
}

application {
  mainClass = 'com.github.tonivade.todo.Application'
  mainModule = 'com.github.tonivade.todo'
}

task fatJar(type: Jar) {
  manifest {
    attributes "Main-Class": "com.github.tonivade.todo.Application"
  }
  archiveClassifier = "all"
  duplicatesStrategy = "warn"
  from {
    configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task downloadGraalvm(type: Download) {
  src "https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${graalvm_version}/graalvm-community-jdk-${graalvm_version}_linux-x64_bin.tar.gz"
  dest new java.io.File(buildDir, "graalvm.tar.gz")
  onlyIfModified true
}

task extractGraalvm(dependsOn: downloadGraalvm, type: Exec) {
  workingDir "$buildDir"
  commandLine 'bash', '-c', 'mkdir -p graalvm && tar -xvf graalvm.tar.gz -C graalvm --strip-components 1'
}

nativeImage {
  graalVmHome = "${buildDir}/graalvm"
  mainClass = "com.github.tonivade.todo.Application"
  executableName = "todo-backend"
  arguments(
          '-J-Xms2G',
          '-J-Xmx2G',
          '--verbose',
          '--report-unsupported-elements-at-runtime',
          '--no-fallback',
          '--allow-incomplete-classpath',
          '--initialize-at-run-time=com.oracle.truffle.js.scriptengine.GraalJSEngineFactory',
          '-H:JNIConfigurationFiles=src/native-image/jni-config.json',
          '-H:ResourceConfigurationFiles=src/native-image/resource-config.json',
          '-H:ReflectionConfigurationFiles=src/native-image/reflect-config.json'
  )
}

task downloadUpx(type: Download) {
  src "https://github.com/upx/upx/releases/download/v${upx_version}/upx-${upx_version}-amd64_linux.tar.xz"
  dest new java.io.File(buildDir, "upx.tar.xz")
  onlyIfModified true
}

task extractUpx(dependsOn: downloadUpx, type: Exec) {
  workingDir "$buildDir"
  commandLine 'bash', '-c', 'mkdir -p upx && tar -xvf upx.tar.xz -C upx --strip-components 1'
}

task compressExecutable(dependsOn: extractUpx, type: Exec) {
  workingDir "$buildDir/upx"
  commandLine 'bash', '-c', './upx --best ../native-image/todo-backend'
}

installNativeImage {
  dependsOn extractGraalvm
}

nativeImage {
  finalizedBy compressExecutable
}
